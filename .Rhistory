output[2,1]
## Create HDF5 file
created <- h5createFile("TidyData.h5")
## Check if the file is created successfully
created
for(i in subjects){
## group names is the subject id
subjectName <- paste0("subject",i)
subjectName
## create a group and a subgroup
h5createGroup("TidyData.h5", subjectName)
# h5createGroup("TidyData.h5", subjectName)
extractedDF <- data.frame(output[,i])
## save in .h5 file
h5write(extractedDF, "TidyData.h5", subjectName)
if(i == 1)
TidyData <-  extractedDF
else
TidyData <- abind(TidyData,extractedDF,along = 3)
}
library(data.table)
# Read the feature names and activity labels
featureNames <- read.table("./UCI HAR Dataset/features.txt")
activityNames <- read.table("./UCI HAR Dataset/activity_labels.txt")
# Reading the test and train sets
testdata <- read.table("./UCI HAR Dataset/test/X_test.txt")
testlabels <- read.table("./UCI HAR Dataset/test/y_test.txt")
testsubject <- read.table("./UCI HAR Dataset/test/subject_test.txt")
traindata <- read.table("./UCI HAR Dataset/train/X_train.txt")
trainlabels <- read.table("./UCI HAR Dataset/train/y_train.txt")
trainsubject <- read.table("./UCI HAR Dataset/train/subject_train.txt")
## get dimensions
testDim <- dim(testdata)
trainDim <- dim(traindata)
subjectID <- rbind(testsubject, trainsubject)
## add to the test table
testdata$testFlag <- rep(TRUE,testDim[1])
## add to the train table
traindata$testFlag <- rep(FALSE,trainDim[1])
totalData <- rbind(testdata,traindata)
totalData$subjectID <- subjectID
##
dim(totalData)
## get varInd
varInd <- grep("mean|std", featureNames[,2])
## check the variables names
featureNames[varInd,2]
meanStd_data <- totalData[,varInd]
head(meanStd_data)
## the used function
replaceNumberWithName <- function(x){activityNames[x,2]}
## replace number with names for test data
testlabels_names <- sapply(testlabels,replaceNumberWithName)
## replace number with names for train data
trainlabels_names <- sapply(trainlabels,replaceNumberWithName)
combinedactivity <- rbind(testlabels_names, trainlabels_names)
totalData$activity <- combinedactivity
## chech totalData dimensions
dim(totalData)
## old column names
names(totalData)[1:10]
## set the new names
setnames(totalData,colnames(totalData)[1:561],as.character(featureNames[,2]))
## new column names
names(totalData)[1:10]
table(trainsubject)
table(testsubject)
library(data.table)
# Read the feature names and activity labels
featureNames <- read.table("./UCI HAR Dataset/features.txt")
activityNames <- read.table("./UCI HAR Dataset/activity_labels.txt")
# Reading the test and train sets
testdata <- read.table("./UCI HAR Dataset/test/X_test.txt")
testlabels <- read.table("./UCI HAR Dataset/test/y_test.txt")
testsubject <- read.table("./UCI HAR Dataset/test/subject_test.txt")
traindata <- read.table("./UCI HAR Dataset/train/X_train.txt")
trainlabels <- read.table("./UCI HAR Dataset/train/y_train.txt")
trainsubject <- read.table("./UCI HAR Dataset/train/subject_train.txt")
## get dimensions
testDim <- dim(testdata)
trainDim <- dim(traindata)
subjectID <- rbind(testsubject, trainsubject)
## add to the test table
testdata$testFlag <- rep(TRUE,testDim[1])
## add to the train table
traindata$testFlag <- rep(FALSE,trainDim[1])
totalData <- rbind(testdata,traindata)
totalData$subjectID <- subjectID
##
dim(totalData)
## get varInd
varInd <- grep("mean|std", featureNames[,2])
## check the variables names
featureNames[varInd,2]
meanStd_data <- totalData[,varInd]
head(meanStd_data)
## the used function
replaceNumberWithName <- function(x){activityNames[x,2]}
## replace number with names for test data
testlabels_names <- sapply(testlabels,replaceNumberWithName)
## replace number with names for train data
trainlabels_names <- sapply(trainlabels,replaceNumberWithName)
combinedactivity <- rbind(testlabels_names, trainlabels_names)
totalData$activity <- combinedactivity
## chech totalData dimensions
dim(totalData)
## old column names
names(totalData)[1:10]
## set the new names
setnames(totalData,colnames(totalData)[1:561],as.character(featureNames[,2]))
## new column names
names(totalData)[1:10]
table(trainsubject)
table(testsubject)
library(abind)
library(rhdf5)
subjects = 1:30
getAverageAndBind <- function(x){
subj <- totalData[totalData$subjectID == x,]
subjAvgData <- aggregate(subj[,2:561], list("activity" = subj$activity), mean)
rownames(subjAvgData) <- activityNames[,2]
subjAvgData
}
output <- sapply(subjects, getAverageAndBind)
##check the dimension of output
dim(output)
## each entry in output is a list eith 6 values
output[2,1]
## Create HDF5 file
created <- h5createFile("TidyData.h5")
## Check if the file is created successfully
created
for(i in subjects){
## group names is the subject id
subjectName <- paste0("subject",i)
subjectName
subgroupName <- paste0(subjectName,"/data")
## create a group and a subgroup
h5createGroup("TidyData.h5", subjectName)
h5createGroup("TidyData.h5", subgroupName)
extractedDF <- data.frame(output[,i])
## save in .h5 file
h5write(extractedDF, "TidyData.h5", subgroupName)
if(i == 1)
TidyData <-  extractedDF
else
TidyData <- abind(TidyData,extractedDF,along = 3)
}
h5ls("TidyData.h5")
created <- h5createFile("tidyData.h5")
created <- h5createFile("tidy.h5")
created
i=1
subjectName <- paste0("subject",i)
subjectName
subgroupName <- paste0(subjectName,"/data")
subgroupName
h5createGroup("tidyData.h5", subjectName)
h5createGroup("tidyData.h5", subgroupName)
h5ls("tidy.h5")
h5ls("tidyData.h5")
library(data.table)
# Read the feature names and activity labels
featureNames <- read.table("./UCI HAR Dataset/features.txt")
activityNames <- read.table("./UCI HAR Dataset/activity_labels.txt")
# Reading the test and train sets
testdata <- read.table("./UCI HAR Dataset/test/X_test.txt")
testlabels <- read.table("./UCI HAR Dataset/test/y_test.txt")
testsubject <- read.table("./UCI HAR Dataset/test/subject_test.txt")
traindata <- read.table("./UCI HAR Dataset/train/X_train.txt")
trainlabels <- read.table("./UCI HAR Dataset/train/y_train.txt")
trainsubject <- read.table("./UCI HAR Dataset/train/subject_train.txt")
## get dimensions
testDim <- dim(testdata)
trainDim <- dim(traindata)
subjectID <- rbind(testsubject, trainsubject)
## add to the test table
testdata$testFlag <- rep(TRUE,testDim[1])
## add to the train table
traindata$testFlag <- rep(FALSE,trainDim[1])
totalData <- rbind(testdata,traindata)
totalData$subjectID <- subjectID
##
dim(totalData)
## get varInd
varInd <- grep("mean|std", featureNames[,2])
## check the variables names
featureNames[varInd,2]
meanStd_data <- totalData[,varInd]
head(meanStd_data)
## the used function
replaceNumberWithName <- function(x){activityNames[x,2]}
## replace number with names for test data
testlabels_names <- sapply(testlabels,replaceNumberWithName)
## replace number with names for train data
trainlabels_names <- sapply(trainlabels,replaceNumberWithName)
combinedactivity <- rbind(testlabels_names, trainlabels_names)
totalData$activity <- combinedactivity
## chech totalData dimensions
dim(totalData)
## old column names
names(totalData)[1:10]
## set the new names
setnames(totalData,colnames(totalData)[1:561],as.character(featureNames[,2]))
## new column names
names(totalData)[1:10]
table(trainsubject)
table(testsubject)
library(abind)
subjects = 1:30
getAverageAndBind <- function(x){
subj <- totalData[totalData$subjectID == x,]
subjAvgData <- aggregate(subj[,2:561], list("activity" = subj$activity), mean)
rownames(subjAvgData) <- activityNames[,2]
subjAvgData
}
output <- sapply(subjects, getAverageAndBind)
##check the dimension of output
dim(output)
## each entry in output is a list eith 6 values
output[2,1]
for(i in subjects){
extractedDF <- data.frame(output[,i])
if(i == 1)
TidyData <-  extractedDF
else
TidyData <- abind(TidyData,extractedDF,along = 3)
}
## check tidyData dimension
dim(TidyData)
tidyData <- write.table(TidyData, file = "TidyData.txt", row.names = F)
tidyData <- read.table("TidyData.txt")
dim(tidyData)
View(tidyData)
names(tidyData)
tidyData[1,]
tidyMelt <- melt(TidyData)
dim(tidyMelt)
View(tidyMelt)
View(tidyMelt)
dim(TidyDatay)
dim(TidyData)
setwd(".\GettingCleaningDataProject/")
setwd("./GettingCleaningDataProject/")
library(data.table)
# Read the feature names and activity labels
featureNames <- read.table("./UCI HAR Dataset/features.txt")
activityNames <- read.table("./UCI HAR Dataset/activity_labels.txt")
# Reading the test and train sets
testdata <- read.table("./UCI HAR Dataset/test/X_test.txt")
testlabels <- read.table("./UCI HAR Dataset/test/y_test.txt")
testsubject <- read.table("./UCI HAR Dataset/test/subject_test.txt")
traindata <- read.table("./UCI HAR Dataset/train/X_train.txt")
trainlabels <- read.table("./UCI HAR Dataset/train/y_train.txt")
trainsubject <- read.table("./UCI HAR Dataset/train/subject_train.txt")
## get dimensions
testDim <- dim(testdata)
trainDim <- dim(traindata)
subjectID <- rbind(testsubject, trainsubject)
## add to the test table
testdata$testFlag <- rep(TRUE,testDim[1])
## add to the train table
traindata$testFlag <- rep(FALSE,trainDim[1])
totalData <- rbind(testdata,traindata)
totalData$subjectID <- subjectID
##
dim(totalData)
## get varInd
varInd <- grep("mean|std", featureNames[,2])
## check the variables names
featureNames[varInd,2]
meanStd_data <- totalData[,varInd]
head(meanStd_data)
## the used function
replaceNumberWithName <- function(x){activityNames[x,2]}
## replace number with names for test data
testlabels_names <- sapply(testlabels,replaceNumberWithName)
## replace number with names for train data
trainlabels_names <- sapply(trainlabels,replaceNumberWithName)
combinedactivity <- rbind(testlabels_names, trainlabels_names)
totalData$activity <- combinedactivity
## chech totalData dimensions
dim(totalData)
## old column names
names(totalData)[1:10]
## set the new names
setnames(totalData,colnames(totalData)[1:561],as.character(featureNames[,2]))
## new column names
names(totalData)[1:10]
table(trainsubject)
table(testsubject)
View(totalData)
names
names(totalData)
newTidy <- aggregate(totalData[,1:561], list("activity"=totalData$activity, "subjectID"=totalData$subjectID), mean)
newTidy <- aggregate(totalData[,1:561], list("activity"=totalData$activity), mean)
View(newTidy)
newTidy <- aggregate(totalData[,1:561], list("subjectID"=totalData$subjectID), mean)
length(totalData$subjectID)
totalData$subjectID
dim(totalData$subjectID)
View(totalData)
newTidy <- aggregate(totalData[,1:561], list("subjectID"=totalData$subjectID), mean)
w <- totalData[, 1:561]
newTidy <- aggregate(totalData[,1:561], list("subjectID"=totalData$subjectID), mean)
class(totalData)
w <- totalData[,653:564]
w <- totalData[,653]
w <- totalData[,563:564]
View(w)
w <- totalData$subjectID
newTidy <- aggregate(totalData, list("subjectID"=totalData$subjectID), mean)
newTidy <- aggregate(totalData[,1:561], by=list("subjectID"=totalData$subjectID), mean)
col <- names(totalData)[1:561]
col
byy <- names(totalData)[562:563]
byy
byy <- names(totalData)[563:564]
byy
newTidy <- aggregate(totalData[col], by=totalData[byy], mean)
newTidy <- aggregate(totalData[,1:561], by=list("ID"=totalData$subjectID), mean)
newTidy <- aggregate(totalData$`tBodyAcc-mean()-X`, by=list("ID"=totalData$subjectID), mean)
newTidy <- aggregate(totalData[col], by=list("ID"=totalData$subjectID), mean)
newTidy <- aggregate(totalData[col], by=list("activity"=totalData$activity), mean)
newTidy <- aggregate(totalData[col], by=list("activity"=totalData$subjectID), mean)
View(subjectID)
typeof(subjectID)
totalData <- rbind(testdata,traindata)
totalData$subjectID <- data.frame(subjectID)
typeof(subjectID)
newTidy <- aggregate(totalData[col], by=list("activity"=totalData$subjectID), mean)
newTidy <- aggregate(totalData[,1:651], by=list("activity"=totalData$subjectID), mean)
names(totalData)
e <- totalData[,1:651]
newTidy <- aggregate(totalData[,1:561], by=list("activity"=totalData$subjectID), mean)
type(totalData$subjectID)
class(totalData$subjectID)
length(totalData)
dim(totalData)
View(subjectID)
totalData <- rbind(testdata,traindata)
totalData$subjectID <- factor(subjectID)
totalData <- rbind(testdata,traindata)
totalData$subjectID <- factor(data.frame(subjectID))
factor(subjectID)
as.numeric(subjectID)
subjectID <- data.table(rbind(testsubject, trainsubject))
as.numeric(subjectID)
class(subjectID)
totalData <- rbind(testdata,traindata)
totalData$subjectID <- subjectID
newTidy <- aggregate(totalData[,1:561], by=list("activity"=totalData$subjectID), mean)
newTidy <- aggregate(totalData[,1:561], by=list("activity"=totalData$subjectID), mean)
library(data.table)
# Read the feature names and activity labels
featureNames <- read.table("./UCI HAR Dataset/features.txt")
activityNames <- read.table("./UCI HAR Dataset/activity_labels.txt")
# Reading the test and train sets
testdata <- read.table("./UCI HAR Dataset/test/X_test.txt")
testlabels <- read.table("./UCI HAR Dataset/test/y_test.txt")
testsubject <- read.table("./UCI HAR Dataset/test/subject_test.txt")
traindata <- read.table("./UCI HAR Dataset/train/X_train.txt")
trainlabels <- read.table("./UCI HAR Dataset/train/y_train.txt")
trainsubject <- read.table("./UCI HAR Dataset/train/subject_train.txt")
## get dimensions
testDim <- dim(testdata)
trainDim <- dim(traindata)
subjectID <- data.table(rbind(testsubject, trainsubject))
## add to the test table
testdata$testFlag <- rep(TRUE,testDim[1])
## add to the train table
traindata$testFlag <- rep(FALSE,trainDim[1])
totalData <- rbind(testdata,traindata)
totalData$subjectID <- subjectID
##
dim(totalData)
## get varInd
varInd <- grep("mean|std", featureNames[,2])
## check the variables names
featureNames[varInd,2]
meanStd_data <- totalData[,varInd]
head(meanStd_data)
## the used function
replaceNumberWithName <- function(x){activityNames[x,2]}
## replace number with names for test data
testlabels_names <- sapply(testlabels,replaceNumberWithName)
## replace number with names for train data
trainlabels_names <- sapply(trainlabels,replaceNumberWithName)
combinedactivity <- rbind(testlabels_names, trainlabels_names)
totalData$activity <- combinedactivity
## chech totalData dimensions
dim(totalData)
## old column names
names(totalData)[1:10]
## set the new names
setnames(totalData,colnames(totalData)[1:561],as.character(featureNames[,2]))
## new column names
names(totalData)[1:10]
table(trainsubject)
table(testsubject)
length(totalData$activity)
length(totalData$subjectID)
length(subjectID)
length(trainsubject)
View(testsubject)
data.frame(testsubject)
p <- data.frame(testsubject)
length(1)
View(subjectID)
length(p)
length(trainlabels)
View(trainlabels)
length(trainlabels_names)
dim(subjectID)
class(subjectID)
totalData <- rbind(testdata,traindata)
totalData <- cbind(totalData,subjectID)
dim(totalData)
##
dim(totalData)
## the used function
replaceNumberWithName <- function(x){activityNames[x,2]}
## replace number with names for test data
testlabels_names <- sapply(testlabels,replaceNumberWithName)
## replace number with names for train data
trainlabels_names <- sapply(trainlabels,replaceNumberWithName)
combinedactivity <- rbind(testlabels_names, trainlabels_names)
totalData$activity <- combinedactivity
## chech totalData dimensions
dim(totalData)
## old column names
names(totalData)[1:10]
## set the new names
setnames(totalData,colnames(totalData)[1:561],as.character(featureNames[,2]))
names(totalData)
names(totalData)[563] <- "ID"
names(totalData)
newTidy <- aggregate(totalData[,1:561], by=list("id"=totalData$ID), mean)
totalData <- rbind(testdata,traindata)
cbind(totalData, subjectID=subjectID)
names(totalData)
names(totalData)
totalData <- rbind(testdata,traindata)
totalData <- cbind(totalData, subjectID=subjectID)
names(totalData)
totalData <- rbind(testdata,traindata)
totalData <- cbind(totalData, "subjectID"=subjectID)
names(totalData)
totalData <- rbind(testdata,traindata)
totalData <- cbind(totalData, setnames(subjectID,c('subjectID')))
names(totalData)
##
dim(totalData)
library(data.table)
# Read the feature names and activity labels
featureNames <- read.table("./UCI HAR Dataset/features.txt")
activityNames <- read.table("./UCI HAR Dataset/activity_labels.txt")
# Reading the test and train sets
testdata <- read.table("./UCI HAR Dataset/test/X_test.txt")
testlabels <- read.table("./UCI HAR Dataset/test/y_test.txt")
testsubject <- read.table("./UCI HAR Dataset/test/subject_test.txt")
traindata <- read.table("./UCI HAR Dataset/train/X_train.txt")
trainlabels <- read.table("./UCI HAR Dataset/train/y_train.txt")
trainsubject <- read.table("./UCI HAR Dataset/train/subject_train.txt")
## get dimensions
testDim <- dim(testdata)
trainDim <- dim(traindata)
subjectID <- data.table(rbind(testsubject, trainsubject))
## add to the test table
testdata$testFlag <- rep(TRUE,testDim[1])
## add to the train table
traindata$testFlag <- rep(FALSE,trainDim[1])
totalData <- rbind(testdata,traindata)
totalData <- cbind(totalData, setnames(subjectID,c('subjectID')))
##
dim(totalData)
## get varInd
varInd <- grep("mean|std", featureNames[,2])
## check the variables names
featureNames[varInd,2]
meanStd_data <- totalData[,varInd]
head(meanStd_data)
## the used function
replaceNumberWithName <- function(x){activityNames[x,2]}
## replace number with names for test data
testlabels_names <- sapply(testlabels,replaceNumberWithName)
## replace number with names for train data
trainlabels_names <- sapply(trainlabels,replaceNumberWithName)
combinedactivity <- rbind(testlabels_names, trainlabels_names)
totalData$activity <- combinedactivity
## chech totalData dimensions
dim(totalData)
## old column names
names(totalData)[1:10]
## set the new names
setnames(totalData,colnames(totalData)[1:561],as.character(featureNames[,2]))
## new column names
names(totalData)[1:10]
table(trainsubject)
table(testsubject)
newTidy <- aggregate(totalData[,1:561], by=list("id"=totalData$ID, "activity" = totalData$activity), mean)
newTidy <- aggregate(totalData[,1:561], by=list("id"=totalData$ID), mean)
newTidy <- aggregate(totalData[,1:561], by=list("id"=totalData$subjectID), mean)
View(newTidy)
newTidy <- aggregate(totalData[,1:561], by=list("id"=totalData$activity), mean)
newTidy <- aggregate(totalData[,1:561], by=list("id"=totalData$subjectID, "activity" = totalData$activity), mean)
View(newTidy)
TidyData <- aggregate(totalData[,1:561], by=list("id"=totalData$subjectID, "activity" = totalData$activity), mean)
## check tidyData dimension
dim(TidyData)
fadwa <- read.table("TidyData.txt")
View(fadwa)
